##1.
select distinct city 
from station
where lower(substr(city,-1,1)) not in ('a','e','i','o','u');


##2.
with table1 as (select * from(select submission_date, hacker_id, row_number() over(partition by submission_date order by c desc,hacker_id asc) r              
from (select submission_date,hacker_id,count(hacker_id) c from Submissions group by submission_date, hacker_id))
where r=1
order by submission_date),
table2 as (select submission_date, count(distinct(hacker_id)) cnt
from(select d.submission_date, s.hacker_id, count(distinct(s.submission_date)) c
    from (select distinct submission_date from Submissions order by 1) d, Submissions s where s.submission_date <= d.submission_date 
    group by d.submission_date, s.hacker_id
    order by submission_date)
    where c = TO_CHAR(submission_date,'DD')
    group by submission_date
    order by submission_date)
select table2.submission_date, table2.cnt, table1.hacker_id, h.name 
from table2 join table1 on(table2.submission_date=table1.submission_date) left join Hackers h on (table1.hacker_id = h.hacker_id)
order by table2.submission_date;


##3.
select big_1.submission_date, big_1.hkr_cnt, big_2.hacker_id, h.name
from
(select submission_date, count(distinct hacker_id) as hkr_cnt
from 
(select s.*, dense_rank() over(order by submission_date) as date_rank, 
dense_rank() over(partition by hacker_id order by submission_date) as hacker_rank 
from submissions s ) a 
where date_rank = hacker_rank 
group by submission_date) big_1 
join 
(select submission_date,hacker_id, 
 rank() over(partition by submission_date order by sub_cnt desc, hacker_id) as max_rank 
from (select submission_date, hacker_id, count(*) as sub_cnt 
      from submissions 
      group by submission_date, hacker_id) b ) big_2
on big_1.submission_date = big_2.submission_date and big_2.max_rank = 1 
join hackers h on h.hacker_id = big_2.hacker_id 
order by 1 


##4.
select submission_date ,
( SELECT COUNT(distinct hacker_id)  
 FROM Submissions s2  
 WHERE s2.submission_date = s1.submission_date AND    (SELECT COUNT(distinct s3.submission_date) FROM      Submissions s3 WHERE s3.hacker_id = s2.hacker_id AND s3.submission_date < s1.submission_date) = dateDIFF(s1.submission_date , '2016-03-01')) ,
(select hacker_id  from submissions s2 where s2.submission_date = s1.submission_date 
group by hacker_id order by count(submission_id) desc , hacker_id limit 1) as shit,
(select name from hackers where hacker_id = shit)
from 
(select distinct submission_date from submissions) s1
group by submission_date


##5.
select table2.submission_date, table2.Unique_Count, table1.hacker_id , hackers.name 
from hackers, 
( select * from ( 
select submission_date, hacker_id ,row_number() over (partition by submission_date order by count desc, hacker_id asc) RN 
from ( select submission_date, hacker_id, count(*) as count from submissions group by submission_date,hacker_id having count(*) >= 1 order by submission_date)) where RN = 1) table1, 

( 
select * from (SELECT submission_date, COUNT(DISTINCT hacker_id) Unique_Count FROM (SELECT a.submission_date, v.hacker_id, COUNT(DISTINCT v.submission_date) cnt FROM ( SELECT DISTINCT submission_date FROM Submissions ORDER BY 1 )A, submissions v WHERE v.submission_date <= a.submission_date GROUP BY a.submission_date, v.hacker_id ) WHERE TO_CHAR(submission_date,'DD') = cnt GROUP BY submission_date ORDER BY 1)

) table2 

where hackers.hacker_id = table1.hacker_id and table1.submission_date = table2.submission_date order by table1.submission_date;



##6.
###Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

WITH T1 AS (SELECT N, P, level l FROM BST 
            START WITH P IS NULL 
            CONNECT BY PRIOR N=P
            ORDER BY l)
SELECT N,(CASE WHEN l= ma THEN 'Leaf' WHEN l=mi THEN 'Root' else 'Inner' END)
from (select N, (select max(l) from T1) as ma ,(select min(l) from T1) as mi,l from T1)
order by N;

###LEVEL must be used in the CONNECT_BY queries.
SELECT EMPNO, MGR_ID, LEVEL
FROM EMPLOYEES E
START WITH MGR_ID IS NULL
CONNECT_BY PRIOR EMPNO = MGR_ID;


##7.
WITH TLM AS (select company_code, count(distinct(lead_manager_code)) co from Lead_Manager group by company_code),
TSM as (select company_code, count(distinct(senior_manager_code)) co from Senior_Manager group by company_code),
TM as (select company_code, count(distinct(manager_code)) co from Manager group by company_code),
TE as (select company_code, count(distinct(employee_code)) co from Employee group by company_code)
select C.company_code, C.founder, TLM.co, TSM.co,TM.co, TE.co
from Company C right join TLM on (C.company_code=TLM.company_code) right join TSM on (TLM.company_code= TSM.company_code) right join TM on(TSM.company_code=TM.company_code) right join TE on (TM.company_code= TE.company_code)
order by substr(company_code, 2);


##8.
##Write a query to output the names of those students whose best friends got offered a higher salary than them. Names must be ordered by the salary amount offered to the best friends. It is guaranteed that no two students got same salary offer.

WITH T1 as (select s.ID, s.Name, p.Salary s1 from Students s left join Packages p on(s.ID=p.ID)),
T2 as (select f.ID, f.Friend_ID, Salary s2 from Friends f left join Packages p on(f.Friend_ID=p.ID))
select T1.Name from T1 join T2 on(T1.ID=T2.ID) where T2.s2>T1.s1
order by T2.s2;



##9.
WITH t as ( select x, y, to_char(x)||to_char(y) xy from Functions )
select x, y from t where xy in (select to_char(f2.y)||to_char(f2.x) from Functions f2) and x<=y
order by t.x;

Symmetric Pairs
Select distinct a.x as w,a.y from functions a ,functions b 
Where a.x =b.y and b.x = a.y and a.x < b.x 
Union all 
Select a1.x as w,a1.y from functions a1 where a1.x = a1.y 
group by a1.x,a1.y 
having count(*)>1 
Order by w;


##10.
WITH t3 as (select v.challenge_id, sum(v.total_views) sv, sum(v.total_unique_views) suv, sum(s.total_submissions) ss, sum(s.total_accepted_submissions) sa
from View_Stats v join Submission_Stats s on(v.challenge_id= s.challenge_id)
    group by v.challenge_id),
t1 as(select * from t3 where sv<>0 and suv<>0 and ss<>0 and sa<>0),
t2 as(select c.college_id, sum(t1.sv) sv,sum(t1.suv) suv,sum(t1.ss) ss, sum(t1.sa) sa
     from t1 left join Challenges c on( t1.challenge_id=c.challenge_id)
     group by college_id)
select c.contest_id, c.hacker_id, c.name, sum(t2.sv),sum(t2.suv),sum(t2.ss), sum(t2.sa) 
from t2 left join Colleges co on (t2.college_id=co.college_id) left join Contests c on(co.contest_id=c.contest_id)
group by c.contest_id,c.hacker_id, c.name
order by c.contest_id;





